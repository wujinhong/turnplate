/**     Copyright (c) 2009 Refunk <http://www.refunk.com>    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/package gordon.view.events.timeline{		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	public class TimelineWatcher extends EventDispatcher {		private var _timeline:MovieClip;		private var previousLabel:String;		private var _reach_lable:Object;		/*		 * The TimelineWatcher class provides functionality to watch a timeline		 *		 * @param timeline		The timeline to be watched		 *		 * The TimelineEvent.LABEL_REACHED event notifies you that a certain label is reached		 * The TimelineEvent.END_REACHED event notifies you that the end of a timeline has been reached		 */		public function TimelineWatcher(timeline:MovieClip,reach_lable:Object) {			super();			_timeline = timeline;			_reach_lable = reach_lable;			_timeline.addEventListener(Event.ENTER_FRAME, watch);		}				private function watch(e:Event):void {			try {								var cf:int = _timeline.currentFrame;				var cl:String = _timeline.currentLabel;				if (_reach_lable)				{					if (_reach_lable is String)					{						if (cl == _reach_lable) {							dispatchEvent(new TimelineEvent(TimelineEvent.LABEL_REACHED, cf, cl));						}					}					if (_reach_lable is Number)					{						if (cf == _reach_lable) 						{							dispatchEvent(new TimelineEvent(TimelineEvent.LABEL_REACHED, cf, cl));						}					}				}				else				{					if (cf == this._timeline.totalFrames)					{						dispatchEvent(new TimelineEvent(TimelineEvent.END_REACHED,cf,cl));					}				}				previousLabel = cl;			}			catch(err:Error) {}		}				/*		 * Dispose a TimelineWatcher instance		 */		public function dispose():void {			try {				_timeline.removeEventListener(Event.ENTER_FRAME, watch);				_timeline = null;			}			catch(err:Error) {}		}			}} 